TOKEN                          LEXEMA
--------------------------------------
PR_INCLUDE                     #include
HEADER                         <math.h>
PR_INCLUDE                     #include
HEADER                         <stdio.h>
PR_DEFINE                      #define
IDENTIFICADOR                  PI
LIT_FLOAT                      3.14159265
PR_DEFINE                      #define
IDENTIFICADOR                  MAX_POINTS
LIT_INT                        100
PR_STRUCT                      struct
IDENTIFICADOR                  Point
LLAVE_AP                       {
PR_FLOAT                       float
IDENTIFICADOR                  x
SE_PUNTO_COMA                  ;
PR_FLOAT                       float
IDENTIFICADOR                  y
SE_PUNTO_COMA                  ;
PR_CHAR                        char
IDENTIFICADOR                  label
SE_PUNTO_COMA                  ;
LLAVE_CE                       }
SE_PUNTO_COMA                  ;
PR_FLOAT                       float
IDENTIFICADOR                  distance
PARENTESIS_AP                  (
PR_STRUCT                      struct
IDENTIFICADOR                  Point
OP_MULTIPLICACION              *
IDENTIFICADOR                  p1
SE_COMA                        ,
PR_STRUCT                      struct
IDENTIFICADOR                  Point
OP_MULTIPLICACION              *
IDENTIFICADOR                  p2
PARENTESIS_CE                  )
LLAVE_AP                       {
PR_FLOAT                       float
IDENTIFICADOR                  dx
OP_ASIGNACION                  =
IDENTIFICADOR                  p1
OP_MIEMBRO_PTR                 ->
IDENTIFICADOR                  x
OP_RESTA                       -
IDENTIFICADOR                  p2
OP_MIEMBRO_PTR                 ->
IDENTIFICADOR                  x
SE_PUNTO_COMA                  ;
PR_FLOAT                       float
IDENTIFICADOR                  dy
OP_ASIGNACION                  =
IDENTIFICADOR                  p1
OP_MIEMBRO_PTR                 ->
IDENTIFICADOR                  y
OP_RESTA                       -
IDENTIFICADOR                  p2
OP_MIEMBRO_PTR                 ->
IDENTIFICADOR                  y
SE_PUNTO_COMA                  ;
PR_RETURN                      return
IDENTIFICADOR                  sqrt
PARENTESIS_AP                  (
IDENTIFICADOR                  dx
OP_MULTIPLICACION              *
IDENTIFICADOR                  dx
OP_SUMA                        +
IDENTIFICADOR                  dy
OP_MULTIPLICACION              *
IDENTIFICADOR                  dy
PARENTESIS_CE                  )
SE_PUNTO_COMA                  ;
LLAVE_CE                       }
PR_INT                         int
IDENTIFICADOR                  main
PARENTESIS_AP                  (
PARENTESIS_CE                  )
LLAVE_AP                       {
PR_STRUCT                      struct
IDENTIFICADOR                  Point
IDENTIFICADOR                  points
CORCHETE_AP                    [
IDENTIFICADOR                  MAX_POINTS
CORCHETE_CE                    ]
SE_PUNTO_COMA                  ;
IDENTIFICADOR                  points
CORCHETE_AP                    [
LIT_INT                        0
CORCHETE_CE                    ]
SE_PUNTO                       .
IDENTIFICADOR                  x
OP_ASIGNACION                  =
LIT_FLOAT                      1.5e2
SE_PUNTO_COMA                  ;
IDENTIFICADOR                  points
CORCHETE_AP                    [
LIT_INT                        0
CORCHETE_CE                    ]
SE_PUNTO                       .
IDENTIFICADOR                  y
OP_ASIGNACION                  =
LIT_FLOAT                      -2.3e-1
SE_PUNTO_COMA                  ;
IDENTIFICADOR                  points
CORCHETE_AP                    [
LIT_INT                        0
CORCHETE_CE                    ]
SE_PUNTO                       .
IDENTIFICADOR                  label
OP_ASIGNACION                  =
LIT_CHAR                       'A'
SE_PUNTO_COMA                  ;
IDENTIFICADOR                  points
CORCHETE_AP                    [
LIT_INT                        1
CORCHETE_CE                    ]
SE_PUNTO                       .
IDENTIFICADOR                  x
OP_ASIGNACION                  =
LIT_FLOAT                      0.0
SE_PUNTO_COMA                  ;
IDENTIFICADOR                  points
CORCHETE_AP                    [
LIT_INT                        1
CORCHETE_CE                    ]
SE_PUNTO                       .
IDENTIFICADOR                  y
OP_ASIGNACION                  =
LIT_FLOAT                      0.0
SE_PUNTO_COMA                  ;
IDENTIFICADOR                  points
CORCHETE_AP                    [
LIT_INT                        1
CORCHETE_CE                    ]
SE_PUNTO                       .
IDENTIFICADOR                  label
OP_ASIGNACION                  =
LIT_CHAR                       'B'
SE_PUNTO_COMA                  ;
PR_FLOAT                       float
IDENTIFICADOR                  d
OP_ASIGNACION                  =
IDENTIFICADOR                  distance
PARENTESIS_AP                  (
OP_DIRECCION                   &
IDENTIFICADOR                  points
CORCHETE_AP                    [
LIT_INT                        0
CORCHETE_CE                    ]
SE_COMA                        ,
OP_DIRECCION                   &
IDENTIFICADOR                  points
CORCHETE_AP                    [
LIT_INT                        1
CORCHETE_CE                    ]
PARENTESIS_CE                  )
SE_PUNTO_COMA                  ;
IDENTIFICADOR                  printf
PARENTESIS_AP                  (
LIT_STRING                     "Distancia entre \" %c \" y  \" %c \" : %f\n"
SE_COMA                        ,
IDENTIFICADOR                  points
CORCHETE_AP                    [
LIT_INT                        0
CORCHETE_CE                    ]
SE_PUNTO                       .
IDENTIFICADOR                  label
SE_COMA                        ,
IDENTIFICADOR                  points
CORCHETE_AP                    [
LIT_INT                        1
CORCHETE_CE                    ]
SE_PUNTO                       .
IDENTIFICADOR                  label
SE_COMA                        ,
IDENTIFICADOR                  d
PARENTESIS_CE                  )
SE_PUNTO_COMA                  ;
PR_RETURN                      return
LIT_INT                        0
SE_PUNTO_COMA                  ;
LLAVE_CE                       }
